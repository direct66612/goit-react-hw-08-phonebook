{"version":3,"file":"static/js/496.0f045b34.chunk.js","mappings":"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","sources":["components/Form/Form.styled.js","../node_modules/nanoid/index.browser.js","components/Form/Form.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/List/List.styled.js","components/List/List.jsx","components/Title/Title.styled.js","components/Title/Title.jsx","pages/ContactsPage.js"],"sourcesContent":["import styled from 'styled-components';\nconst Container = styled('div')`\n  border: 1px solid #000;\n  width: 400px;\n  padding: 20px;\n  margin-left: 30px;\n  .form {\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n  }\n`;\nexport default Container;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import Container from \"./Form.styled\";\nimport { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getContacts } from \"../../Redux/contactsSlice\";\nimport { addContactAction } from \"../../Redux/api\";\nexport const Form = () => {\n  const [data, setData] = useState({ name: \"\", phone: \"\" });\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const handleChange = (e) => {\n    let { name, value } = e.target;\n    setData((prev) => ({ ...prev, [name]: value }));\n  };\n  const resetForm = (e) => {\n    e.preventDefault();\n\n    if (\n      contacts.some(\n        (contact) => contact.name.toLowerCase() === data.name.toLowerCase()\n      )\n    ) {\n      alert(`${data.name} is already in contactcs!`);\n      return;\n    }\n\n    const newContact = {\n      id: nanoid(),\n      ...data,\n    };\n\n    dispatch(addContactAction(newContact));\n    setData({ name: \"\", phone: \"\" });\n  };\n  return (\n    <Container>\n      <form onSubmit={resetForm} className=\"form\">\n        <p className=\"input__text\">Name</p>\n        <input\n          className=\"input__name\"\n          type=\"text\"\n          name=\"name\"\n          value={data.name}\n          onChange={handleChange}\n        />\n        <input\n          className=\"input__tel\"\n          type=\"number\"\n          name=\"phone\"\n          value={data.phone}\n          onChange={handleChange}\n          required\n        />\n        <button className=\"input__btn\" type=\"submit\">\n          Add Contact\n        </button>\n      </form>\n    </Container>\n  );\n};\n","import styled from 'styled-components';\nconst Container = styled('div')`\n  margin-left: 35px;\n`;\nexport default Container;\n","import { filter } from \"../../Redux/filterSlice\";\nimport { useDispatch } from \"react-redux\";\nimport Container from \"./Filter.styled\";\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const handleFilter = (e) => {\n    dispatch(filter(e.currentTarget.value));\n  };\n  return (\n    <Container>\n      <h3>Find contacts by name</h3>\n      <input\n        className=\"input__filter\"\n        type=\"text\"\n        name=\"contact_name\"\n        placeholder=\"Search...\"\n        onChange={handleFilter}\n      />\n    </Container>\n  );\n};\n","import styled from 'styled-components';\nconst Container = styled('ul')`\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n  margin-left: 20px;\n  list-style-type: none;\n  .contact__item {\n    border: 1px solid #000;\n    padding: 20px;\n  }\n`;\nexport default Container;\n","import { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport Container from \"./List.styled\";\nimport { getContacts } from \"../../Redux/contactsSlice\";\nimport { deleteContactAction } from \"../../Redux/api\";\nimport { getFilter } from \"../../Redux/filterSlice\";\nexport const List = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const filteredContacts = (contacts, filter) => {\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n  const contactsIsFiltered = filteredContacts(contacts, filter);\n  const dispatch = useDispatch();\n  const onDeleteContact = (idEl) => {\n    dispatch(deleteContactAction(idEl));\n  };\n  return (\n    <Container>\n      {contactsIsFiltered.map(({ id, name, phone }) => (\n        <li key={id} className=\"contact__item\">\n          <p>\n            {name}: {phone}\n          </p>\n          <button\n            type=\"button\"\n            onClick={() => onDeleteContact(id)}\n            className=\"contact__btn\"\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </Container>\n  );\n};\n","import styled from 'styled-components';\nconst Header = styled('h2')`\n  margin-left: 30px;\n`;\nexport default Header;\n","import Header from './Title.styled';\nconst Title = ({ title }) => {\n  return <Header>{title}</Header>;\n};\nexport default Title;\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { getContacts, selectLoading } from \"../Redux/contactsSlice\";\nimport { fetchContactsAction } from \"../Redux/api\";\n\nimport { useEffect } from \"react\";\nimport { Form } from \"../components/Form/Form\";\nimport { Filter } from \"../components/Filter/Filter\";\nimport { List } from \"../components/List/List\";\nimport Title from \"../components/Title/Title\";\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContactsAction());\n  }, [dispatch]);\n\n  const contacts = useSelector(getContacts);\n\n  return (\n    <div>\n      <Title title=\"Phonebook\"></Title>\n      <Form />\n\n      <Title title=\"Contacts\"></Title>\n      <Filter />\n\n      {isLoading ? (\n        <p>loading...</p>\n      ) : contacts.length > 0 ? (\n        <List />\n      ) : (\n        <p>No contacts</p>\n      )}\n    </div>\n  );\n}\n"],"names":["styled","_templateObject","_taggedTemplateLiteral","nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","Form","_useState","useState","name","phone","_useState2","_slicedToArray","data","setData","dispatch","useDispatch","contacts","useSelector","getContacts","handleChange","e","_e$target","target","value","prev","_objectSpread","_defineProperty","_jsx","Container","children","_jsxs","onSubmit","preventDefault","some","contact","toLowerCase","alert","concat","newContact","addContactAction","className","type","onChange","required","Filter","placeholder","filter","currentTarget","List","contactsIsFiltered","includes","filteredContacts","getFilter","map","_ref","onClick","idEl","deleteContactAction","title","Header","ContactsPage","isLoading","selectLoading","useEffect","fetchContactsAction","Title"],"sourceRoot":""}